package com.ness.org.controller;

import java.security.Principal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ness.org.entity.Employee;
import com.ness.org.entity.EmployeeRequest;
import com.ness.org.entity.EmployeeResponse;
import com.ness.org.entity.ResourceNotFoundException;
import com.ness.org.repository.DepartmentRepo;
import com.ness.org.repository.EmployeeRepo;
import com.ness.org.service.IEmployeeService;
import com.ness.org.util.JwtUtil;


@RestController
public class EmployeeController {

	@Autowired
	private EmployeeRepo employeeRepo;

	@Autowired
	private DepartmentRepo departmentRepo;
	
	@Autowired
	private IEmployeeService service;

	
	@Autowired
	private AuthenticationManager authenticationManager;

	
	@Autowired
	private JwtUtil jwtUtil;

	/*
	 * @GetMapping("/department/{departmentId}/employee") public List<Employee>
	 * getEmployeesByDepartmnt(@PathVariable(value = "postId") Integer departmentId)
	 * { return employeeRepo.findByDepartmentId(departmentId); }
	 */
	@PostMapping("/save/{deptId}/employee")
	public ResponseEntity<String> createEmployee(@PathVariable(value = "deptId") Integer departmentId, @RequestBody Employee employee)
			throws ResourceNotFoundException {
		Integer id=service.saveEmployee(employee,departmentId);
		return ResponseEntity.ok("Employee saved with id "+ id);
		}
	
    // delete the employee based on department
	
	  @DeleteMapping("/departments/{departmentId}/employee/{employeeId}")
	  public  ResponseEntity<?> deleteEmployee(@PathVariable(value = "departmentId")
	  Integer departmentId, 
	  @PathVariable(value = "employeeId") Integer employeeId) throws
	  ResourceNotFoundException {
		
		  return employeeRepo.findByEmpIdAndDepartmentDeptId(employeeId,
		  departmentId).map(employee -> { employeeRepo.delete(employee); return
		  ResponseEntity.ok().build(); }).orElseThrow(() -> new
		  ResourceNotFoundException( "Employee not found with id " + employeeId +
		  " and departmentId " + departmentId));
		  }
	 
	// update the employee based on dept
	@PutMapping("/departments/{departmentId}/employee/{employeeId}")
	public Employee updateEmployee(@PathVariable(value = "departmentId") Integer departmentId,
			@PathVariable(value = "employeeId") Integer employeeId, @RequestBody Employee employeeRequest)
			throws ResourceNotFoundException {
		if (!departmentRepo.existsById(departmentId)) {
			throw new ResourceNotFoundException("DeptID not found");
		}
               boolean existsById = employeeRepo.existsById(employeeId);
               Employee emp=null;
               if(existsById) {
				 emp = employeeRepo.findByEmpId(employeeId);
				 emp.setName(employeeRequest.getName());
				 return employeeRepo.save(emp);
			}
               else
            	   throw new ResourceNotFoundException("employee id not found");
				/*
				 * return employeeRepo.findbympId(employeeId).map(employee -> {
				 * employee.setName(employeeRequest.getName()); return
				 * employeeRepo.save(employee); }).orElseThrow(() -> new
				 * ResourceNotFoundException("employee id not found"));
				 */}
	@GetMapping("/hi")
	public String hello()
	{
		return "connected";
		
	}
	@PostMapping("/getToken")
	public ResponseEntity<EmployeeResponse> loginEmployee(@RequestBody EmployeeRequest employeeRequest)
	{

		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(
						employeeRequest.getUsername(), 
						employeeRequest.getPassword()
						)
				);

		String token=jwtUtil.generateToken(employeeRequest.getUsername());

		return ResponseEntity.ok(new EmployeeResponse(token,"GENERATED BY MR.PANK"));
	}
	@PostMapping("/welcome")
	public ResponseEntity<String> accessEmployeeData(Principal p) {
		return ResponseEntity.ok("Welcome TO  Employee Dashbord: "+p.getName());
	}
	
	@GetMapping("/listOfEmployee")
	public List<Employee> fetchEmployeeList()
	    {
	        return  service.findAll();
	    }

}
